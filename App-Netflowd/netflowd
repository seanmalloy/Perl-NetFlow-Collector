#!/usr/bin/env perl

# Copyright (c) 2013 Sean Malloy. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#    - Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    - Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# ABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

use strict;
use warnings;
use English qw( -no_match_vars );
use IO::Socket;
use NetFlow::Parser;
use Getopt::Long;
use SPM::Daemon qw( init_server_user );
use SPM::Syslog qw( log_die log_error log_info log_warn );
use DBI;
use Config::Simple;
use Pod::Usage;
use File::Basename;
use App::Netflowd::Database qw( connect_netflowd_database );

# Signal Handlers
$SIG{'INT'}  = 'exit_handler';
$SIG{'TERM'} = 'exit_handler';

my ($Config_File, $Database_File, $Group, $Help, $Listen_Address, $Man_Page, $Pid_File, $Port, $User);
if (!GetOptions('config-file=s'    => \$Config_File,
                'database=s'       => \$Database_File,
                'group=s'          => \$Group,
                'help'             => \$Help,
                'listen-address=s' => \$Listen_Address,
                'manpage'          => \$Man_Page,
                'pid-file=s'       => \$Pid_File,
                'port=i'           => \$Port,
                'user=s'           => \$User, )) {
    pod2usage(-exitval => 1,
              -verbose => 1, 
    );
}

if ($Help) {
    pod2usage(-exitval => 0,
              -verbose => 1,
    );
}

if ($Man_Page) {
    pod2usage(-exitval => 0,
              -verbose => 2,
    );
}

if (!defined $Config_File) {
    my $error_message = "Missing required command line option: --config-file";
    pod2usage(-exitval => 1,
              -msg     => $error_message,
              -verbose => 0,
    );
}

my $Config;
eval {
    $Config = new Config::Simple($Config_File);
}; if ($EVAL_ERROR) {
    print "Failed to parse configuration file $Config_File: ", Config::Simple->error(), "\n";
    exit 1;
}

if (!defined $Database_File) {
    $Database_File = $Config->param('database.file');
}

if (!defined $User) {
    $User = $Config->param('general.user');
}
if (!defined $Group) {
    $Group = $Config->param('general.group');
}

if (!defined $Pid_File) {
    $Pid_File = $Config->param('general.pid-file');
}

if (!defined $Listen_Address) {
    $Listen_Address = $Config->param('network.listen-address');
}

if (!defined $Port) {
    $Port = $Config->param('network.port');
}

# Set Defaults
if (!defined $Port) {
    $Port = 1234;
}
if (!defined $Pid_File) {
    $Pid_File = '/var/run/' . basename($PROGRAM_NAME). '.pid';
} 
if (!defined $Listen_Address) {
    $Listen_Address = '0.0.0.0';
}

init_server_user($Pid_File, $User, $Group);
### All syslog calls must go below this line ###

log_info("Daemon started successfully", "\n");

my $Database_Handle = connect_netflowd_database($Database_File);

my $Exit = 0;

my $parser = NetFlow::Parser->new();

# Maximum packet size for Netflow v5.
# 24 + (30 * 48) = 1464 bytes
# Header: 24 bytes
# Each Flow: 48 bytes (can be 1 to 30 flows per packet)
my $Maximum_Length = 1464;
my $Packet;
my $Data;

my $Header_Statement_Handle = $Database_Handle->prepare("INSERT INTO headers(version, count, system_uptime, unix_seconds, unix_nano_seconds, flow_sequence, engine_type, engine_id, sampling_mode, sampling_interval) VALUES (?,?,?,?,?,?,?,?,?,?)");
my $Flow_Statement_Handle   = $Database_Handle->prepare("INSERT INTO flows(source_ip_address, destination_ip_address, next_hop_ip_address, snmp_input_index, snmp_output_index, packets, bytes, start_system_uptime, end_system_uptime, source_port, destination_port, tcp_flags, ip_protocol, type_of_service, source_system_number, destination_system_number, source_mask, destination_mask, header_id) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

my $Header_Primary_Key;
my $Sock;
MAIN:
while (!$Exit) {
    if (!defined $Sock) {
        $Sock = new IO::Socket::INET( LocalAddr => $Listen_Address, LocalPort => $Port, Proto => 'udp' )
            or die "socket: $EVAL_ERROR";
        log_info("Listening on $Listen_Address port $Port", "\n");
    }

    
    if (!$Sock->recv($Data, $Maximum_Length)) {
        $Sock->close();
        undef $Sock;
        log_warn("UDP packet receive error: $OS_ERROR", "\n");
        next MAIN;
    }

    my $peer_port = $Sock->peerport();
    my $peer_ip   = $Sock->peerhost();
    log_info("Received netfow data from $peer_ip port $peer_port", "\n");
    $Packet = $parser->parse($Data);
    $Header_Statement_Handle->execute( $Packet->version(), $Packet->count(), $Packet->sys_uptime(), $Packet->unix_secs(), $Packet->unix_nsecs(), $Packet->flow_sequence(), $Packet->engine_type(), $Packet->engine_id, $Packet->sampling_mode, $Packet->sampling_interval() );
    $Header_Primary_Key = $Database_Handle->last_insert_id("", "", "", "");
    for my $flow (@{$Packet->flows()}) {
        $Flow_Statement_Handle->execute( $flow->srcaddr(), $flow->dstaddr(), $flow->nexthop(), $flow->input(), $flow->output(), $flow->packets(), $flow->bytes(), $flow->first(), $flow->last(), $flow->srcport(), $flow->dstport(), $flow->tcpflags(), $flow->protocol(), $flow->tos(), $flow->srcas(), $flow->dstas(), $flow->srcmask(), $flow->dstmask(), $Header_Primary_Key );
    }
}
clean_up();
exit 0;

sub clean_up {
    log_info("Disconnecting from database $Database_File", "\n");
    $Database_Handle->disconnect;
}

sub exit_handler {
    my $signal = shift;
    log_info("Received signal $signal", "\n");
    $Exit = 1;
}

__END__
=head1 NAME

netflowd - Netflow Collector Daemon

=head1 SYNOPSIS

  netflowd --config-file <FILE> [--database <DB>] [--group <GROUP>] [--listen-address <IP>]
                                [--pid-file <FILE>] [--port <PORT>] [--user <USER>]
  netflowd --help
  netflowd --manpage

=head1 DESCRIPTION

Netflow collector daemon. Only supports Netflow v5.

=head1 OPTIONS

=over

=item --config-file I<FILE>

Path to configuration file. This option is required.

=item --database I<DB>

Path to SQLite database file.

=item --group I<GROUP>

UNIX group to run as.

=item --help

Display help and exit.

=item --listen-address I<IP>

Listen on IP address I<IP>. Default listen address
is 0.0.0.0. Only supports IP version 4.

=item --manpage

Display entire manual and exit.

=item --pid-file I<FILE>

Path to the PID file. Default is /var/run/netflowd.pid.

=item --port I<PORT>

UDP port daemon listens on for Netflow data. Default is 1234.

=item --user I<USER>

Unix user to run as.

=back

=head1 CONFIGURATION AND ENVIRONMENT

Command line options take precedence over the configuraiton
file. Lines that start with the # symobl are comments.

Example configuraton file:
  [general]
  user = netflowd
  group = netflowd
  pid-file = /var/run/netflowd.pid

  [database]
  file = /var/netflowd/netflowd.db

  [network]
  port = 1234
  listen-address = 127.0.0.1

=head1 EXAMPLE USAGE

    netflowd --config-file /usr/local/etc/netflowd.conf

=head1 BUGS AND LIMITATIONS

No known bugs at this time.

=head1 SEE ALSO

Netflow Export Datagram Format
    http://www.cisco.com/en/US/docs/net_mgmt/netflow_collection_engine/3.6/user/guide/format.html

=head1 AUTHOR

Sean Malloy, E<lt>spinelli85@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2013 Sean Malloy. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

   - Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
   - Redistributions in binary form must reproduce the above
     copyright notice, this list of conditions and the following
     disclaimer in the documentation and/or other materials provided
     with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
ABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

=cut

